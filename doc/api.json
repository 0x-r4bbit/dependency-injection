{"name":"dependency-injection","description":"A lightweight, extensible dependency injection container for JavaScript.","classes":[{"name":"Container","file":"aurelia/dependency-injection/src/container.js","line":23,"description":"A lightweight, extensible dependency injection container.","is_constructor":1,"methods":[{"line":36,"description":"Adds an additional location to search for constructor parameter type info.","name":"addParameterInfoLocator","params":[{"name":"locator","description":"Configures a locator function to use when searching for parameter info. It should return undefined if no parameter info is found.","type":"Function"}]},{"line":52,"description":"Registers an existing object instance with the container.","name":"registerInstance","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"instance","description":"The instance that will be resolved when the key is matched.","type":"Object"}]},{"line":63,"description":"Registers a type (constructor function) such that the container returns a new instance for each request.","name":"registerTransient","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"fn","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function","optional":true}]},{"line":75,"description":"Registers a type (constructor function) such that the container always returns the same instance for each request.","name":"registerSingleton","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"fn","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function","optional":true}]},{"line":88,"description":"Registers a type (constructor function) by inspecting its registration annotations. If none are found, then the default singleton registration is used.","name":"autoRegister","params":[{"name":"fn","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function"},{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object","optional":true}]},{"line":111,"description":"Registers an array of types (constructor functions) by inspecting their registration annotations. If none are found, then the default singleton registration is used.","name":"autoRegisterAll","params":[{"name":"fns","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function[]"}]},{"line":124,"description":"Registers a custom resolution function such that the container calls this function for each request to obtain the instance.","name":"registerHandler","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"handler","description":"The resolution function to use when the dependency is needed. It will be passed one arguement, the container instance that is invoking it.","type":"Function"}]},{"line":135,"description":"Unregisters based on key.","name":"unregister","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"}]},{"line":145,"description":"Resolves a single instance based on the provided key.","name":"get","params":[{"name":"key","description":"The key that identifies the object to resolve.","type":"Object"}],"return":{"description":"Returns the resolved instance.","type":"Object"}},{"line":183,"description":"Resolves all instance registered under the provided key.","name":"getAll","params":[{"name":"key","description":"The key that identifies the objects to resolve.","type":"Object"}],"return":{"description":"Returns an array of the resolved instances.","type":"Object[]"}},{"line":210,"description":"Inspects the container to determine if a particular key has been registred.","name":"hasHandler","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"checkParent","description":"Indicates whether or not to check the parent container hierarchy.","type":"Boolean","optional":true,"optdefault":"false"}],"return":{"description":"Returns true if the key has been registred; false otherwise.","type":"Boolean"}},{"line":227,"description":"Creates a new dependency injection container whose parent is the current container.","name":"createChild","return":{"description":"Returns a new container instance parented to this.","type":"Container"}},{"line":241,"description":"Invokes a function, recursively resolving its dependencies.","name":"invoke","params":[{"name":"fn","description":"The function to invoke with the auto-resolved dependencies.","type":"Function"}],"return":{"description":"Returns the instance resulting from calling the function.","type":"Object"}}],"properties":[],"events":[]},{"name":"Registration","file":"aurelia/dependency-injection/src/metadata.js","line":3,"description":"Used to allow functions/classes to indicate how they should be registered with the container.","is_constructor":1,"methods":[{"line":10,"description":"Called by the container to allow custom registration logic for the annotated function/class.","name":"register","params":[{"name":"container","description":"The container to register with.","type":"Container"},{"name":"key","description":"The key to register as.","type":"Object"},{"name":"fn","description":"The function to register (target of the annotation).","type":"Object"}]}],"properties":[],"events":[]},{"name":"TransientRegistration","file":"aurelia/dependency-injection/src/metadata.js","line":23,"description":"Used to allow functions/classes to indicate that they should be registered as transients with the container.","is_constructor":1,"extends":"Registration","params":[{"name":"key","description":"The key to register as.","type":"Object","optional":true}],"methods":[{"line":37,"description":"Called by the container to register the annotated function/class as transient.","name":"register","params":[{"name":"container","description":"The container to register with.","type":"Container"},{"name":"key","description":"The key to register as.","type":"Object"},{"name":"fn","description":"The function to register (target of the annotation).","type":"Object"}]}],"properties":[],"events":[]},{"name":"SingletonRegistration","file":"aurelia/dependency-injection/src/metadata.js","line":50,"description":"Used to allow functions/classes to indicate that they should be registered as singletons with the container.","is_constructor":1,"extends":"Registration","params":[{"name":"key","description":"The key to register as.","type":"Object","optional":true}],"methods":[{"line":70,"description":"Called by the container to register the annotated function/class as a singleton.","name":"register","params":[{"name":"container","description":"The container to register with.","type":"Container"},{"name":"key","description":"The key to register as.","type":"Object"},{"name":"fn","description":"The function to register (target of the annotation).","type":"Object"}]}],"properties":[],"events":[]},{"name":"Resolver","file":"aurelia/dependency-injection/src/metadata.js","line":84,"description":"An abstract resolver used to allow functions/classes to specify custom dependency resolution logic.","is_constructor":1,"methods":[{"line":91,"description":"Called by the container to allow custom resolution of dependencies for a function/class.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns the resolved object.","type":"Object"}}],"properties":[],"events":[]},{"name":"Lazy","file":"aurelia/dependency-injection/src/metadata.js","line":103,"description":"Used to allow functions/classes to specify lazy resolution logic.","is_constructor":1,"extends":"Resolver","params":[{"name":"key","description":"The key to lazily resolve.","type":"Object"}],"methods":[{"line":117,"description":"Called by the container to lazily resolve the dependency into a lazy locator function.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns a function which can be invoked at a later time to obtain the actual dependency.","type":"Function"}},{"line":130,"description":"Creates a Lazy Resolver for the supplied key.","name":"of","static":1,"params":[{"name":"key","description":"The key to lazily resolve.","type":"Object"}],"return":{"description":"Returns an insance of Lazy for the key.","type":"Lazy"}}],"properties":[],"events":[]},{"name":"All","file":"aurelia/dependency-injection/src/metadata.js","line":143,"description":"Used to allow functions/classes to specify resolution of all matches to a key.","is_constructor":1,"extends":"Resolver","params":[{"name":"key","description":"The key to lazily resolve all matches for.","type":"Object"}],"methods":[{"line":157,"description":"Called by the container to resolve all matching dependencies as an array of instances.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns an array of all matching instances.","type":"Object[]"}},{"line":168,"description":"Creates an All Resolver for the supplied key.","name":"of","static":1,"params":[{"name":"key","description":"The key to resolve all instances for.","type":"Object"}],"return":{"description":"Returns an insance of All for the key.","type":"All"}}],"properties":[],"events":[]},{"name":"Optional","file":"aurelia/dependency-injection/src/metadata.js","line":181,"description":"Used to allow functions/classes to specify an optional dependency, which will be resolved only if already registred with the container.","is_constructor":1,"extends":"Resolver","params":[{"name":"key","description":"The key to optionally resolve for.","type":"Object"},{"name":"checkParent","description":"Indicates whether or not the parent container hierarchy should be checked.","type":"Boolean","optional":true,"optdefault":"false"}],"methods":[{"line":197,"description":"Called by the container to provide optional resolution of the key.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns the instance if found; otherwise null.","type":"Object"}},{"line":212,"description":"Creates an Optional Resolver for the supplied key.","name":"of","static":1,"params":[{"name":"key","description":"The key to optionally resolve for.","type":"Object"},{"name":"checkParent","description":"Indicates whether or not the parent container hierarchy should be checked.","type":"Boolean","optional":true,"optdefault":"false"}],"return":{"description":"Returns an insance of Optional for the key.","type":"Optional"}}],"properties":[],"events":[]},{"name":"Parent","file":"aurelia/dependency-injection/src/metadata.js","line":227,"description":"Used to inject the dependency from the parent container instead of the current one.","is_constructor":1,"extends":"Resolver","params":[{"name":"key","description":"The key to resolve from the parent container.","type":"Object"}],"methods":[{"line":241,"description":"Called by the container to load the dependency from the parent container","name":"get","params":[{"name":"container","description":"The container to resolve the parent from.","type":"Container"}],"return":{"description":"Returns the matching instance from the parent container","type":"Function"}},{"line":254,"description":"Creates a Parent Resolver for the supplied key.","name":"of","static":1,"params":[{"name":"key","description":"The key to resolve.","type":"Object"}],"return":{"description":"Returns an insance of Parent for the key.","type":"Parent"}}],"properties":[],"events":[]},{"name":"InstanceActivator","file":"aurelia/dependency-injection/src/metadata.js","line":267,"description":"Used to construct instances.","is_constructor":1,"methods":[],"properties":[],"events":[]},{"name":"ClassActivator","file":"aurelia/dependency-injection/src/metadata.js","line":279,"description":"Used to instantiate a class.","is_constructor":1,"methods":[],"properties":[],"events":[]},{"name":"FactoryActivator","file":"aurelia/dependency-injection/src/metadata.js","line":291,"description":"Used to invoke a factory method.","is_constructor":1,"methods":[],"properties":[],"events":[]}],"methods":[],"properties":[],"events":[]}