{"name":"dependency-injection","description":"A lightweight, extensible dependency injection container for JavaScript.","classes":[{"name":"Inject","file":"aurelia/dependency-injection/src/annotations.js","line":1,"description":"An annotation which specifies what needs to be injected into the annotated function/class.","is_constructor":1,"params":[{"name":"...keys","description":"The keys for the requested instances.","type":"Object"}],"methods":[],"properties":[],"events":[]},{"name":"Registration","file":"aurelia/dependency-injection/src/annotations.js","line":14,"description":"An abstract annotation used to allow functions/classes to indicate how they should be registered with the container.","is_constructor":1,"methods":[{"line":21,"description":"Called by the container to allow custom registration logic for the annotated function/class.","name":"register","params":[{"name":"container","description":"The container to register with.","type":"Container"},{"name":"key","description":"The key to register as.","type":"Object"},{"name":"fn","description":"The function to register (target of the annotation).","type":"Object"}]}],"properties":[],"events":[]},{"name":"Transient","file":"aurelia/dependency-injection/src/annotations.js","line":34,"description":"An annotation used to allow functions/classes to indicate that they should be registered as transients with the container.","is_constructor":1,"extends":"Registration","params":[{"name":"key","description":"The key to register as.","type":"Object","optional":true}],"methods":[{"line":47,"description":"Called by the container to register the annotated function/class as transient.","name":"register","params":[{"name":"container","description":"The container to register with.","type":"Container"},{"name":"key","description":"The key to register as.","type":"Object"},{"name":"fn","description":"The function to register (target of the annotation).","type":"Object"}]}],"properties":[],"events":[]},{"name":"Singleton","file":"aurelia/dependency-injection/src/annotations.js","line":60,"description":"An annotation used to allow functions/classes to indicate that they should be registered as singletons with the container.","is_constructor":1,"extends":"Registration","params":[{"name":"key","description":"The key to register as.","type":"Object","optional":true}],"methods":[{"line":73,"description":"Called by the container to register the annotated function/class as a singleton.","name":"register","params":[{"name":"container","description":"The container to register with.","type":"Container"},{"name":"key","description":"The key to register as.","type":"Object"},{"name":"fn","description":"The function to register (target of the annotation).","type":"Object"}]}],"properties":[],"events":[]},{"name":"Resolver","file":"aurelia/dependency-injection/src/annotations.js","line":86,"description":"An abstract annotation used to allow functions/classes to specify custom dependency resolution logic.","is_constructor":1,"methods":[{"line":93,"description":"Called by the container to allow custom resolution of dependencies for a function/class.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns the resolved object.","type":"Object"}}],"properties":[],"events":[]},{"name":"Lazy","file":"aurelia/dependency-injection/src/annotations.js","line":105,"description":"An annotation used to allow functions/classes to specify lazy resolution logic.","is_constructor":1,"extends":"Resolver","params":[{"name":"key","description":"The key to lazily resolve.","type":"Object"}],"methods":[{"line":118,"description":"Called by the container to lazily resolve the dependency into a lazy locator function.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns a function which can be invoked at a later time to obtain the actual dependency.","type":"Function"}},{"line":131,"description":"Creates a Lazy Resolver for the supplied key.","name":"of","static":1,"params":[{"name":"key","description":"The key to lazily resolve.","type":"Object"}],"return":{"description":"Returns an insance of Lazy for the key.","type":"Lazy"}}],"properties":[],"events":[]},{"name":"All","file":"aurelia/dependency-injection/src/annotations.js","line":144,"description":"An annotation used to allow functions/classes to specify resolution of all matches to a key.","is_constructor":1,"extends":"Resolver","params":[{"name":"key","description":"The key to lazily resolve all matches for.","type":"Object"}],"methods":[{"line":157,"description":"Called by the container to resolve all matching dependencies as an array of instances.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns an array of all matching instances.","type":"Object[]"}},{"line":168,"description":"Creates an All Resolver for the supplied key.","name":"of","static":1,"params":[{"name":"key","description":"The key to resolve all instances for.","type":"Object"}],"return":{"description":"Returns an insance of All for the key.","type":"All"}}],"properties":[],"events":[]},{"name":"Optional","file":"aurelia/dependency-injection/src/annotations.js","line":181,"description":"An annotation used to allow functions/classes to specify an optional dependency, which will be resolved only if already registred with the container.","is_constructor":1,"extends":"Resolver","params":[{"name":"key","description":"The key to optionally resolve for.","type":"Object"},{"name":"checkParent","description":"Indicates whether or not the parent container hierarchy should be checked.","type":"Boolean","optional":true,"optdefault":"false"}],"methods":[{"line":196,"description":"Called by the container to provide optional resolution of the key.","name":"get","params":[{"name":"container","description":"The container to resolve from.","type":"Container"}],"return":{"description":"Returns the instance if found; otherwise null.","type":"Object"}},{"line":211,"description":"Creates an Optional Resolver for the supplied key.","name":"of","static":1,"params":[{"name":"key","description":"The key to optionally resolve for.","type":"Object"},{"name":"checkParent","description":"Indicates whether or not the parent container hierarchy should be checked.","type":"Boolean","optional":true,"optdefault":"false"}],"return":{"description":"Returns an insance of Optional for the key.","type":"Optional"}}],"properties":[],"events":[]},{"name":"Container","file":"aurelia/dependency-injection/src/container.js","line":11,"description":"A lightweight, extensible dependency injection container.","is_constructor":1,"methods":[{"line":23,"description":"Registers an existing object instance with the container.","name":"registerInstance","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"instance","description":"The instance that will be resolved when the key is matched.","type":"Object"}]},{"line":34,"description":"Registers a type (constructor function) such that the container returns a new instance for each request.","name":"registerTransient","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"fn","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function","optional":true}]},{"line":46,"description":"Registers a type (constructor function) such that the container always returns the same instance for each request.","name":"registerSingleton","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"fn","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function","optional":true}]},{"line":59,"description":"Registers a type (constructor function) by inspecting its registration annotations. If none are found, then the default singleton registration is used.","name":"autoRegister","params":[{"name":"fn","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function"},{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object","optional":true}]},{"line":76,"description":"Registers an array of types (constructor functions) by inspecting their registration annotations. If none are found, then the default singleton registration is used.","name":"autoRegisterAll","params":[{"name":"fns","description":"The constructor function to use when the dependency needs to be instantiated.","type":"Function[]"}]},{"line":89,"description":"Registers a custom resolution function such that the container calls this function for each request to obtain the instance.","name":"registerHandler","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"handler","description":"The resolution function to use when the dependency is needed. It will be passed one arguement, the container instance that is invoking it.","type":"Function"}]},{"line":100,"description":"Resolves a single instance based on the provided key.","name":"get","params":[{"name":"key","description":"The key that identifies the object to resolve.","type":"Object"}],"return":{"description":"Returns the resolved instance.","type":"Object"}},{"line":134,"description":"Resolves all instance registered under the provided key.","name":"getAll","params":[{"name":"key","description":"The key that identifies the objects to resolve.","type":"Object"}],"return":{"description":"Returns an array of the resolved instances.","type":"Object[]"}},{"line":155,"description":"Inspects the container to determine if a particular key has been registred.","name":"hasHandler","params":[{"name":"key","description":"The key that identifies the dependency at resolution time; usually a constructor function.","type":"Object"},{"name":"checkParent","description":"Indicates whether or not to check the parent container hierarchy.","type":"Boolean","optional":true,"optdefault":"false"}],"return":{"description":"Returns true if the key has been registred; false otherwise.","type":"Boolean"}},{"line":168,"description":"Creates a new dependency injection container whose parent is the current container.","name":"createChild","return":{"description":"Returns a new container instance parented to this.","type":"Container"}},{"line":180,"description":"Creates a new dependency injection container using a derived container type whose parent is the current container.","name":"createTypedChild","params":[{"name":"childContainerType","description":"A type derived from Container which will be instantiated as the child.","type":"Function"}],"return":{"description":"Returns a new container instance parented to this.","type":"Container"}},{"line":193,"description":"Invokes a function, recursively resolving its dependencies.","name":"invoke","params":[{"name":"fn","description":"The function to invoke with the auto-resolved dependencies.","type":"Function"}],"return":{"description":"Returns the instance resulting from calling the function.","type":"Object"}}],"properties":[],"events":[]}],"methods":[],"properties":[],"events":[]}